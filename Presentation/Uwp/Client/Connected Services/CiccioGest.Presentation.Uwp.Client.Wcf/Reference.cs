//------------------------------------------------------------------------------
// <auto-generated>
//     Il codice è stato generato da uno strumento.
//     Versione runtime:4.0.30319.42000
//
//     Le modifiche apportate a questo file possono provocare un comportamento non corretto e andranno perse se
//     il codice viene rigenerato.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.VisualStudio.ServiceReference.Platforms, version 16.0.29512.175
// 
namespace CiccioGest.Presentation.Uwp.Client.Wcf {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CiccioGest.Presentation.Uwp.Client.Wcf.IFatturaService")]
    internal interface IFatturaService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://gest.cicciosoft.tk/IFatturaService/GetFatture", ReplyAction="http://gest.cicciosoft.tk/IFatturaService/GetFattureResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<CiccioGest.Domain.Documenti.FatturaReadOnly>> GetFattureAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://gest.cicciosoft.tk/IFatturaService/GetFattura", ReplyAction="http://gest.cicciosoft.tk/IFatturaService/GetFatturaResponse")]
        System.Threading.Tasks.Task<CiccioGest.Domain.Documenti.Fattura> GetFatturaAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://gest.cicciosoft.tk/IFatturaService/SaveFattura", ReplyAction="http://gest.cicciosoft.tk/IFatturaService/SaveFatturaResponse")]
        System.Threading.Tasks.Task<CiccioGest.Domain.Documenti.Fattura> SaveFatturaAsync(CiccioGest.Domain.Documenti.Fattura fattura);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://gest.cicciosoft.tk/IFatturaService/DeleteFattura", ReplyAction="http://gest.cicciosoft.tk/IFatturaService/DeleteFatturaResponse")]
        System.Threading.Tasks.Task DeleteFatturaAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://gest.cicciosoft.tk/IFatturaService/GetArticolo", ReplyAction="http://gest.cicciosoft.tk/IFatturaService/GetArticoloResponse")]
        System.Threading.Tasks.Task<CiccioGest.Domain.Magazino.Articolo> GetArticoloAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://gest.cicciosoft.tk/IFatturaService/GetCliente", ReplyAction="http://gest.cicciosoft.tk/IFatturaService/GetClienteResponse")]
        System.Threading.Tasks.Task<CiccioGest.Domain.ClientiFornitori.Cliente> GetClienteAsync(int idCliente);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    internal interface IFatturaServiceChannel : CiccioGest.Presentation.Uwp.Client.Wcf.IFatturaService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    internal partial class FatturaServiceClient : System.ServiceModel.ClientBase<CiccioGest.Presentation.Uwp.Client.Wcf.IFatturaService>, CiccioGest.Presentation.Uwp.Client.Wcf.IFatturaService {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public FatturaServiceClient() : 
                base(FatturaServiceClient.GetDefaultBinding(), FatturaServiceClient.GetDefaultEndpointAddress()) {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IFatturaService.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public FatturaServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(FatturaServiceClient.GetBindingForEndpoint(endpointConfiguration), FatturaServiceClient.GetEndpointAddress(endpointConfiguration)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public FatturaServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(FatturaServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public FatturaServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(FatturaServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public FatturaServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<CiccioGest.Domain.Documenti.FatturaReadOnly>> GetFattureAsync() {
            return base.Channel.GetFattureAsync();
        }
        
        public System.Threading.Tasks.Task<CiccioGest.Domain.Documenti.Fattura> GetFatturaAsync(int id) {
            return base.Channel.GetFatturaAsync(id);
        }
        
        public System.Threading.Tasks.Task<CiccioGest.Domain.Documenti.Fattura> SaveFatturaAsync(CiccioGest.Domain.Documenti.Fattura fattura) {
            return base.Channel.SaveFatturaAsync(fattura);
        }
        
        public System.Threading.Tasks.Task DeleteFatturaAsync(int id) {
            return base.Channel.DeleteFatturaAsync(id);
        }
        
        public System.Threading.Tasks.Task<CiccioGest.Domain.Magazino.Articolo> GetArticoloAsync(int id) {
            return base.Channel.GetArticoloAsync(id);
        }
        
        public System.Threading.Tasks.Task<CiccioGest.Domain.ClientiFornitori.Cliente> GetClienteAsync(int idCliente) {
            return base.Channel.GetClienteAsync(idCliente);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IFatturaService)) {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IFatturaService)) {
                return new System.ServiceModel.EndpointAddress("http://localhost:8000/fatturaservice.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding() {
            return FatturaServiceClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IFatturaService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress() {
            return FatturaServiceClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IFatturaService);
        }
        
        public enum EndpointConfiguration {
            
            BasicHttpBinding_IFatturaService,
        }
    }
}
